@startuml
'https://plantuml.com/class-diagram class Server {
class Server {
  -std::atomic<bool> serverStatus;
  +explicit Server(Socket& skt);

}
class AcceptThread {
  - std::atomic<bool>& serverIsOpen;
  - Socket soktRef;

}
 class Menu {
  - GameHandler gameHandler;
}
class ClientsHandler {
  - std::vector<std::unique_ptr<MenuClient>> menuclients;

}
class MenuClient {
  - Socket& skt;

}
class MenuProtocol {
  - Socket skt;
  - bool was_closed;
  - GameHandler& games;
}
class GameHandler {
  - std::mutex mutexgames;
}

class Games {
  - std::map<std::string, Game> allGames;
  - std::vector<std::unique_ptr<RunGame>> allRunGames;
}
class Game{
   -int capacity;
   -int occupation;
   -std::vector<std::unique_ptr<StandbyClient>> clients}
class Games {
  -std::map<std::string, Game> allGames;
 - std::vector<std::unique_ptr<RunGame>> allRunGames;
}
class StandbyClient {
 private:
  Socket skt;
}
class RunGame{
 -GameLogic gameLogic;
 -ProtectedQueue<std::shared_ptr<GameCommand> > gammingEventQueue;
 -std::vector<std::unique_ptr<GamingClient>> players;
 -std::queue<std::shared_ptr<SnapShot> > replayQueue;
 -std::atomic<bool>  isClosed;
 }

class CommandHandler {
}
Server-- AcceptThread
AcceptThread-- Menu
Menu -- ClientsHandler
ClientsHandler -- MenuClient
MenuClient-right- MenuProtocol
Menu-right- GameHandler
GameHandler -right- Games
Games -- Game
StandbyClient -right- Game
Games -up- RunGame
RunGame -up- GameLogic

MenuProtocol -right- CommandHandler
CommandHandler -right- MenuCommand








    @enduml